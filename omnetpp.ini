[General]
network = AdvancedTomahawk6Network
sim-time-limit = 10s
seed-set = 0

# Output configuration
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
result-dir = results

# Default Tomahawk 6 Configuration
**.switch[*].portConfiguration = "512x200G"
**.switch[*].serdesConfiguration = "128x106_25G_PAM4"
**.switch[*].switchingCapacity = 102.4Tbps
**.switch[*].numPorts = 512
**.switch[*].bufferSize = 64MiB
**.switch[*].queuesPerPort = 8

# SerDes Configuration
**.serdes[*].dataRate = 106.25Gbps
**.serdes[*].latency = 50ns

# Packet Buffer Configuration
**.packetBuffer[*].numQueues = 8
**.packetBuffer[*].bufferSize = 64MiB
**.packetBuffer[*].schedulingAlgorithm = "WRR"
**.packetBuffer[*].aiPriorityQueues = 4
**.packetBuffer[*].rocevSupport = true
**.packetBuffer[*].adaptiveBuffering = true

# Cognitive Router Configuration
**.cognitiveRouter.adaptiveRouting = true
**.cognitiveRouter.congestionControl = true
**.cognitiveRouter.loadBalancing = true
**.cognitiveRouter.routingLatency = 50ns
**.cognitiveRouter.advancedTelemetry = true
**.cognitiveRouter.dynamicCongestionControl = true
**.cognitiveRouter.rapidFailureDetection = true
**.cognitiveRouter.packetTrimming = true

# AI Traffic Generator Configuration
**.trafficGen[*].workloadType = "AllReduce"
**.trafficGen[*].trafficIntensity = 0.8
**.trafficGen[*].burstSize = 1MiB
**.trafficGen[*].burstInterval = 1ms
**.trafficGen[*].rocevProtocol = true
**.trafficGen[*].flowSize = 10MiB
**.trafficGen[*].tensorSize = 100MiB
**.trafficGen[*].batchSize = 64
**.trafficGen[*].numGPUs = 8
**.trafficGen[*].computeToCommRatio = 10.0

#
# Configuration: Basic Test
#
[Config BasicTest]
description = "Basic Tomahawk 6 functionality test"
**.numSwitches = 1
**.trafficGen[*].tensorSize = 1MB
sim-time-limit = 1s

#
# Configuration: High Load Test
#
[Config HighLoadTest]
description = "High load stress test"
**.trafficGen[*].trafficIntensity = 0.95
**.trafficGen[*].burstSize = 10MiB
**.trafficGen[*].burstInterval = 0.5ms

#
# Configuration: AI Training Workload
#
[Config AITrainingWorkload]
description = "AI training workload simulation"
**.trafficGen[*].workloadType = "AllReduce"
**.trafficGen[*].tensorSize = 1GiB
**.trafficGen[*].batchSize = 128
**.trafficGen[*].numGPUs = 64
**.trafficGen[*].trafficIntensity = 0.9

#
# Configuration: AI Inference Workload
#
[Config AIInferenceWorkload]
description = "AI inference workload simulation"
**.trafficGen[*].workloadType = "P2P"
**.trafficGen[*].tensorSize = 10MiB
**.trafficGen[*].batchSize = 1
**.trafficGen[*].numGPUs = 16
**.trafficGen[*].trafficIntensity = 0.7

#
# Configuration: Scale-up Network Test
#
[Config ScaleUpTest]
description = "Scale-up network topology test"
**.numSwitches = 2
**.topology = "ScaleUp"
**.switch[*].networkTopology = "ScaleUp"

#
# Configuration: Clos Network Test
#
[Config ClosNetworkTest]
description = "Clos network topology test"
**.numSwitches = 4
**.topology = "Clos"
**.switch[*].networkTopology = "Clos"

#
# Configuration: Torus Network Test
#
[Config TorusNetworkTest]
description = "Torus network topology test"
**.numSwitches = 8
**.topology = "Torus"
**.switch[*].networkTopology = "Torus"

#
# Configuration: 212.5G SerDes Test
#
[Config HighSpeedSerDesTest]
description = "212.5G PAM4 SerDes configuration test"
**.switch[*].serdesConfiguration = "64x212_5G_PAM4"
**.switch[*].numPorts = 64
**.serdes[*].dataRate = 212.5Gbps
**.serdes[*].serdesType = "PAM4_212_5G"

#
# Configuration: Adaptive Buffer Test
#
[Config AdaptiveBufferTest]
description = "Adaptive buffering performance test"
**.packetBuffer[*].adaptiveBuffering = true
**.packetBuffer[*].schedulingAlgorithm = "AI_OPTIMIZED"
**.trafficGen[*].workloadType = "AllReduce"
**.trafficGen[*].trafficIntensity = 0.85

#
# Configuration: Congestion Control Test
#
[Config CongestionControlTest]
description = "Cognitive routing congestion control test"
**.cognitiveRouter.congestionControl = true
**.cognitiveRouter.packetTrimming = true
**.trafficGen[*].trafficIntensity = 0.99
**.trafficGen[*].burstSize = 50MiB

#
# Configuration: RoCEv2 Protocol Test
#
[Config RoCEv2Test]
description = "RoCEv2 protocol performance test"
**.trafficGen[*].rocevProtocol = true
**.packetBuffer[*].rocevSupport = true
**.trafficGen[*].workloadType = "AllReduce"
**.trafficGen[*].flowSize = 100MiB

#
# Configuration: Multi-Workload Test
#
[Config MultiWorkloadTest]
description = "Multiple AI workload types test"
**.trafficGen[0..7].workloadType = "AllReduce"
**.trafficGen[8..15].workloadType = "AllGather"
**.trafficGen[16..23].workloadType = "P2P"
**.trafficGen[*].trafficIntensity = 0.8

#
# Configuration: Failure Recovery Test
#
[Config FailureRecoveryTest]
description = "Port failure detection and recovery test"
**.cognitiveRouter.rapidFailureDetection = true
**.cognitiveRouter.adaptiveRouting = true
# Note: Port failures would be injected programmatically

#
# Configuration: Large Scale Test
#
[Config LargeScaleTest]
description = "Large scale network simulation"
**.numSwitches = 16
**.trafficGen[*].numGPUs = 128
**.trafficGen[*].tensorSize = 10GiB
**.switch[*].portConfiguration = "1024x100G"
**.switch[*].numPorts = 1024

#
# Configuration: Bandwidth Scaling Test
#
[Config BandwidthScalingTest]
description = "Test different bandwidth configurations"
repeat = 5
**.trafficGen[*].trafficIntensity = ${0.2, 0.4, 0.6, 0.8, 0.95}

#
# Configuration: Latency Analysis
#
[Config LatencyAnalysisTest]
description = "Detailed latency analysis"
**.packetBuffer[*].processingDelay = ${10ns, 50ns, 100ns, 200ns}
**.serdes[*].latency = ${10ns, 50ns, 100ns}
**.cognitiveRouter.routingLatency = ${10ns, 50ns, 100ns}

# Statistics and Output Configuration
**.vector-recording = true
**.scalar-recording = true

# Record key performance metrics
**.throughput.result-recording-modes = all
**.latency.result-recording-modes = all
**.queueLength.result-recording-modes = all
**.bufferUtilization.result-recording-modes = all
**.congestionLevel.result-recording-modes = all
**.routingDecision.result-recording-modes = all

# Visualization settings for OMNeT++ GUI
**.switch[*].displayString = "i=device/switch;is=l"
**.trafficGen[*].displayString = "i=block/source;is=s"